{
  "quiz": {
    "id": 53510,
    "title": "Validations Quiz",
    "html_url": "https://learning.flatironschool.com/courses/7560/quizzes/53510",
    "mobile_url": "https://learning.flatironschool.com/courses/7560/quizzes/53510?force_user=1&persist_headless=1",
    "description": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"python-p4-quiz-forms-and-validations\"></div>\n<header class=\"fis-header\">\n  <a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/python-p4-quiz-forms-and-validations/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a>\n</header>\n\n<p>It's time to check your knowledge! Use this quiz to create a custom study guide.\nNote any answers that were marked incorrect, so you can study the relevant\nmaterial and try this quiz again.</p>\n\n<p>If you don't know the answer to a question, please do not guess. Instead, select\n\"I don't know\". It's OK not to know everything and to admit when we're unsure.</p>",
    "quiz_type": "assignment",
    "time_limit": null,
    "timer_autosubmit_disabled": false,
    "shuffle_answers": true,
    "show_correct_answers": true,
    "scoring_policy": "keep_highest",
    "allowed_attempts": 3,
    "one_question_at_a_time": true,
    "question_count": 6,
    "points_possible": 6.0,
    "cant_go_back": false,
    "access_code": null,
    "ip_filter": null,
    "due_at": null,
    "lock_at": null,
    "unlock_at": null,
    "published": false,
    "unpublishable": true,
    "locked_for_user": true,
    "lock_info": {
      "missing_permission": "participate_as_student",
      "asset_string": "quizzes:quiz_53510"
    },
    "lock_explanation": "This quiz is currently locked.",
    "hide_results": null,
    "show_correct_answers_at": null,
    "hide_correct_answers_at": null,
    "all_dates": [
      {
        "due_at": null,
        "unlock_at": null,
        "lock_at": null,
        "base": true
      }
    ],
    "can_unpublish": true,
    "can_update": true,
    "require_lockdown_browser": false,
    "require_lockdown_browser_for_results": false,
    "require_lockdown_browser_monitor": false,
    "lockdown_browser_monitor_data": "",
    "speed_grader_url": null,
    "permissions": {
      "manage": true,
      "read": true,
      "create": true,
      "update": true,
      "submit": true,
      "preview": true,
      "delete": true,
      "read_statistics": true,
      "grade": true,
      "review_grades": true,
      "view_answer_audits": true
    },
    "quiz_reports_url": "https://learning.flatironschool.com/api/v1/courses/7560/quizzes/53510/reports",
    "quiz_statistics_url": "https://learning.flatironschool.com/api/v1/courses/7560/quizzes/53510/statistics",
    "message_students_url": "https://learning.flatironschool.com/api/v1/courses/7560/quizzes/53510/submission_users/message",
    "section_count": 1,
    "important_dates": false,
    "quiz_submission_versions_html_url": "https://learning.flatironschool.com/courses/7560/quizzes/53510/submission_versions",
    "assignment_id": 263683,
    "one_time_results": false,
    "only_visible_to_overrides": false,
    "assignment_group_id": 25107,
    "show_correct_answers_last_attempt": true,
    "version_number": 5,
    "has_access_code": false,
    "post_to_sis": false,
    "migration_id": "g0083b13ba5ac9c7e604e490f100921c1",
    "in_paced_course": false,
    "question_types": [

    ]
  },
  "questions": [
    {
      "id": 366114,
      "quiz_id": 53510,
      "quiz_group_id": null,
      "assessment_question_id": 632214,
      "position": null,
      "question_name": "Validations",
      "question_type": "multiple_answers_question",
      "question_text": "<p>Which SQLAlchemy constraint enforces that two rows cannot have the same value\nfor a specific column?</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "Source/s:  SQLAlchemy Constraints",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"/courses/7560/pages/sqlalchemy-constraints?module_item_id=629412\">SQLAlchemy Constraints</a></li></ul><p></p>",
      "answers": [
        {
          "id": "6015",
          "text": "",
          "comments": "",
          "comments_html": "<p>Right! We can pass in the unique constraint by using <code>unique=True</code> in\nthe model column definition.</p>",
          "weight": 100.0,
          "html": "<p><code>unique</code></p>"
        },
        {
          "id": "3273",
          "text": "",
          "comments": "",
          "comments_html": "<p>The nullable constraint only enforces that the value cannot be Null.</p>",
          "weight": 0.0,
          "html": "<p><code>nullable</code></p>"
        },
        {
          "id": "1426",
          "text": "",
          "comments": "",
          "comments_html": "",
          "weight": 0.0,
          "html": "<p>I don't know.</p>"
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 366115,
      "quiz_id": 53510,
      "quiz_group_id": null,
      "assessment_question_id": 632212,
      "position": null,
      "question_name": "Validations",
      "question_type": "multiple_choice_question",
      "question_text": "<p>How do we add constraints for multiple columns at a database level?</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "Source/s:  SQLAlchemy Validations",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"/courses/7560/pages/flask-sqlalchemy-validations\">SQLAlchemy Validations</a></li></ul><p></p>",
      "answers": [
        {
          "id": 2580,
          "text": "",
          "html": "<p>We can use CheckConstraints outside of the column definitions\nunder<code>__table_args__</code> .</p>",
          "comments": "",
          "comments_html": "<p>Right!</p>",
          "weight": 100.0
        },
        {
          "id": 1954,
          "text": "",
          "html": "<p>We can use the validates function from the <code>sqlalchemy.orm</code>.</p>",
          "comments": "",
          "comments_html": "<p>Not quite! The validates function would allow us to validate multiple columns\nbut it is a python level validation.</p>",
          "weight": 0.0
        },
        {
          "id": 6556,
          "text": "",
          "html": "<p>I don't know.</p>",
          "comments": "",
          "comments_html": "",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 366116,
      "quiz_id": 53510,
      "quiz_group_id": null,
      "assessment_question_id": 635913,
      "position": null,
      "question_name": "Validations",
      "question_type": "multiple_choice_question",
      "question_text": "<p>What does the key represent in the validate_email method?</p>\n<div class=\"highlight\"><pre class=\"highlight python\"><code><span class=\"o\">@</span><span class=\"n\">validates</span><span class=\"p\">(</span><span class=\"s\">'email'</span><span class=\"p\">,</span> <span class=\"s\">'backup_email'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">validate_email</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">address</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"s\">'@'</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">address</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"nb\">ValueError</span><span class=\"p\">(</span><span class=\"s\">\"failed simple email validation\"</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">address</span>\n</code></pre></div>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "Source/s:  Flask-SQLAlchemy Validations",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"/courses/7560/pages/flask-sqlalchemy-validations\">Flask-SQLAlchemy Validations</a></li></ul><p></p>",
      "answers": [
        {
          "id": 6675,
          "text": "",
          "html": "<p>It represents which column the validate_email method is running on in case we\nare validating multiple columns with one function.</p>",
          "comments": "",
          "comments_html": "<p>Bingo! The key is how we determine which column is being validated so we can\nknow what conditions we need to apply to the column.</p>",
          "weight": 100.0
        },
        {
          "id": 5341,
          "text": "",
          "html": "<p>The key represents the primary key value for the row.</p>",
          "comments": "",
          "comments_html": "<p>Not quite! The names can be confusing but the key in this context has a\ndifferent meaning.</p>",
          "weight": 0.0
        },
        {
          "id": 8484,
          "text": "",
          "html": "<p>I don't know</p>",
          "comments": "",
          "comments_html": "",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 366117,
      "quiz_id": 53510,
      "quiz_group_id": null,
      "assessment_question_id": 632213,
      "position": null,
      "question_name": "Validations",
      "question_type": "multiple_choice_question",
      "question_text": "<p>Which of these validations is most appropriate for making sure that a\nmodel's <strong>category</strong> must be either \"Fruit\" or \"Vegetable\"?</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "Source/s:  Flask-SQLAlchemy Validations",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"/courses/7560/pages/flask-sqlalchemy-validations\">Flask-SQLAlchemy Validations</a></li></ul><p></p>",
      "answers": [
        {
          "id": 3982,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight python\"><code><span class=\"o\">@</span><span class=\"n\">validates</span><span class=\"p\">(</span><span class=\"s\">'category'</span><span class=\"p\">)</span> \n<span class=\"k\">def</span> <span class=\"nf\">validate_category</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">category</span><span class=\"p\">):</span>\n  <span class=\"k\">if</span> <span class=\"n\">category</span> <span class=\"o\">!=</span> <span class=\"s\">'Fruit'</span> <span class=\"ow\">and</span> <span class=\"n\">category</span> <span class=\"o\">!=</span> <span class=\"s\">'Vegetable'</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"nb\">ValueError</span><span class=\"p\">(</span><span class=\"s\">\"Category must be Fruit or Vegetable.\"</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"n\">category</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Correct! In the validate_category method we can check if the category is not\nthe two allowed values.</p>",
          "weight": 100.0
        },
        {
          "id": 6655,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight python\"><code><span class=\"k\">def</span> <span class=\"nf\">validate_category</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">category</span><span class=\"p\">):</span>\n  <span class=\"k\">if</span> <span class=\"n\">category</span> <span class=\"o\">!=</span> <span class=\"s\">'Fruit'</span> <span class=\"ow\">and</span> <span class=\"n\">category</span> <span class=\"o\">!=</span> <span class=\"s\">'Vegetable'</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"nb\">ValueError</span><span class=\"p\">(</span><span class=\"s\">\"Category must be Fruit or Vegetable.\"</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"n\">category</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Almost! We are missing something important before we write the\nvalidate_category method.</p>",
          "weight": 0.0
        },
        {
          "id": 2162,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight python\"><code><span class=\"o\">@</span><span class=\"n\">validates</span><span class=\"p\">(</span><span class=\"s\">'category'</span><span class=\"p\">)</span> \n<span class=\"k\">def</span> <span class=\"nf\">validate_category</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">category</span><span class=\"p\">):</span>\n  <span class=\"k\">if</span> <span class=\"n\">category</span> <span class=\"o\">==</span> <span class=\"s\">'Fruit'</span> <span class=\"ow\">and</span> <span class=\"n\">category</span> <span class=\"o\">==</span> <span class=\"s\">'Vegetable'</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"nb\">ValueError</span><span class=\"p\">(</span><span class=\"s\">\"Category must be Fruit or Vegetable.\"</span><span class=\"p\">)</span>\n<span class=\"err\">&nbsp;</span> <span class=\"k\">return</span> <span class=\"n\">category</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Something is wrong with the validation logic here.</p>",
          "weight": 0.0
        },
        {
          "id": 4402,
          "text": "",
          "html": "<p>I don't know</p>",
          "comments": "",
          "comments_html": "",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 366118,
      "quiz_id": 53510,
      "quiz_group_id": null,
      "assessment_question_id": 632211,
      "position": null,
      "question_name": "Validations",
      "question_type": "multiple_choice_question",
      "question_text": "<p>Which of these validations is most appropriate for making sure that a\nmodel's <strong>title</strong> is at least 20 letters long?</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "Source/s:  Flask-SQLAlchemy Validations",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"/courses/7560/pages/flask-sqlalchemy-validations\">Flask-SQLAlchemy Validations</a></li></ul><p></p>",
      "answers": [
        {
          "id": 8980,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight python\"><code><span class=\"o\">@</span><span class=\"n\">validates</span><span class=\"p\">(</span><span class=\"s\">'title'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">validate_title</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"p\">):</span>\n  <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">20</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"nb\">ValueError</span><span class=\"p\">(</span><span class=\"s\">\"title must be 20 letters.\"</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"n\">title</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Right! <code>len()</code> is helpful for checking the length of an attribute.</p>",
          "weight": 100.0
        },
        {
          "id": 8844,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight python\"><code><span class=\"o\">@</span><span class=\"n\">validates</span><span class=\"p\">(</span><span class=\"s\">'title'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">validate_title</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"p\">):</span>\n  <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">20</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"nb\">ValueError</span><span class=\"p\">(</span><span class=\"s\">\"title must be 20 letters.\"</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"n\">title</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Not quite! Let's look at the validation logic how would we check if a string is\nat least 20 characters long?</p>",
          "weight": 0.0
        },
        {
          "id": 5030,
          "text": "",
          "html": "<p>I don't know</p>",
          "comments": "",
          "comments_html": "",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 366119,
      "quiz_id": 53510,
      "quiz_group_id": null,
      "assessment_question_id": 635914,
      "position": null,
      "question_name": "Validations",
      "question_type": "multiple_choice_question",
      "question_text": "<p>Of the following HTTP status codes, which is the most appropriate to return if a\nmodel's data is not valid?</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "Source/s:  Flask-SQLAlchemy Validations",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"/courses/7560/pages/flask-sqlalchemy-validations\">Flask-SQLAlchemy Validations</a></li></ul><p></p>",
      "answers": [
        {
          "id": 1548,
          "text": "",
          "html": "<p>422 (Unprocessable Entity)</p>",
          "comments": "",
          "comments_html": "<p>Right! To quote the\n<a href=\"https://datatracker.ietf.org/doc/html/rfc4918#section-11.2\">spec</a>: The 422\n(Unprocessable Entity) status code means the server understands the content\ntype of the request entity, and the syntax of the request entity is correct,\nbut was unable to process the contained instructions. There are some\n<a href=\"https://stackoverflow.com/a/20215807\">differences of opinion on this</a>.</p>",
          "weight": 100.0
        },
        {
          "id": 5218,
          "text": "",
          "html": "<p>418 (I'm a teapot)</p>",
          "comments": "",
          "comments_html": "<p>This is an actual status code that was created as an <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/418\">April Fool's\njoke</a>!</p>",
          "weight": 0.0
        },
        {
          "id": 5018,
          "text": "",
          "html": "<p>500 (Internal Server Error)</p>",
          "comments": "",
          "comments_html": "<p>500 Internal Server Error indicates that \"something went wrong on the server\",\ntypically because of a runtime error on the server itself. You shouldn't return\nthis status code from any controller actions directly.</p>",
          "weight": 0.0
        },
        {
          "id": 7978,
          "text": "",
          "html": "<p>404 (Not Found)</p>",
          "comments": "",
          "comments_html": "<p>This error indicates that the record itself wasn't found, not that the model's\ndata was not valid.</p>",
          "weight": 0.0
        },
        {
          "id": 9636,
          "text": "",
          "html": "<p>I don't know</p>",
          "comments": "",
          "comments_html": "",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    }
  ]
}